stage cell as ubyte[width];

param width as int;
param rule  as int;

init {
    cell[width idiv 2] <= 1;
}

operation {
    parallel each (at i in cell) {
        var left  as int = (i > 0)         ? i - 1 : width - 1;
        var right as int = (i < width - 1) ? i + 1 : 0;     
        var state as int = cell<now>[left] * 4 + cell<now>[i] * 2 + cell<now>[right];

        cell<next>[i] = GetBit(rule, state);
    }
}

func GetBit(value as int, no as int) as ubyte {
    for (i = 1 to no) {
        value = value idiv 2;
    }
    
    return (value mod 2) as ubyte;
}
