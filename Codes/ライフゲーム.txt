///
/// サンプルコード
///   - ライフゲーム
///

// 二次元平面(縁は使わない)
stage plain as ubyte[nx, ny];

// パラメーターの宣言
//   - 値を初期化していないので、シミュレーション開始時に入力するよう促される
param nx as int;            // 平面の高さ
param ny as int;            // 平面の幅
param portion as float;     // 初期状態での個体密度(0以上1以下)

init {
    // 個体が平面の面積のportion倍だけ占めるよう乱数で初期化
    each (at i, j in plain) {
        if (i != 0 and i != nx - 1 and j != 0 and j != ny - 1) {
            var f = randomfloat(0, 1);
            plain[i, j] <= (f <= portion ? 1 : 0) as ubyte;
        }
    }
}

operation {
    // 「parallel」 --> インデックスiについて並列化
    parallel each (at i, j in plain) {
        if (i != 0 and i != nx - 1 and j != 0 and j != ny - 1) {
            var numNeighbors as int = 0;        // 隣接する個体数
            
            for (x = i - 1 to i + 1) {
                for (y = j - 1 to j + 1) {
                    numNeighbors += plain<now>[x, y];
                }
            }
            
            numNeighbors -= plain<now>[i, j];    // 自分自身を引く

            if (numNeighbors = 3) {
                plain<next>[i, j] = 1;
            } else if (numNeighbors = 2) {
                plain<next>[i, j] = plain<now>[i, j];
            } else {
                plain<next>[i, j] = 0;
            }
        }
    }
}
